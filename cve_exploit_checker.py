import argparse
import requests
import csv
import json
from typing import List, Dict, Any

class CVEExploitChecker:
    def __init__(self):
        self.nvd_api = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.nvd_api_key = "2298413b-2730-4a3d-bb1a-a8e4a1501b02"
        self.nvd_headers = {
            "User-Agent": "CVE-Exploit-Checker/1.0",
            "apiKey": self.nvd_api_key
        }
        self.exploit_sources = [
            "exploit-db.com",
            "github.com",
            "packetstormsecurity.com",
            "cxsecurity.com",
            "0day.today",
            "exploithub.com",
            "metasploit.com",
            "seclists.org",
            "securityfocus.com",
            "vulners.com",
            "rapid7.com"
        ]

    def get_cve_data_nvd(self, cve_id: str) -> Dict[str, Any]:
        try:
            response = requests.get(
                f"{self.nvd_api}?cveId={cve_id}",
                headers=self.nvd_headers,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching data from NVD for {cve_id}: {e}")
            return None

    def check_exploits_nvd(self, cve_data: Dict[str, Any]) -> List[str]:
        """Check NVD data for known exploit references"""
        exploits = []
        if not cve_data:
            return exploits
        try:
            vulnerabilities = cve_data.get('vulnerabilities', [])
            for vuln in vulnerabilities:
                references = vuln['cve'].get('references', [])
                for ref in references:
                    url = ref.get('url', '').lower()
                    if any(source in url for source in self.exploit_sources):
                        exploits.append(ref['url'])
        except KeyError as e:
            print(f"Error parsing NVD data: {e}")
        return exploits

    def process_cve_list(self, cve_ids: List[str]) -> Dict[str, List[str]]:
        results = {}
        for cve_id in cve_ids:
            print(f"Checking {cve_id}...")
            nvd_data = self.get_cve_data_nvd(cve_id)
            exploits = self.check_exploits_nvd(nvd_data)
            results[cve_id] = exploits
        return results

def read_cve_ids_from_csv(csv_file_path: str) -> List[str]:
    cve_ids = set()
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                cve_id = row.get('cve_id', '').strip()
                if cve_id and cve_id.lower() != 'none' and cve_id.startswith('CVE-'):
                    cve_ids.add(cve_id)
    except FileNotFoundError:
        print(f"Error: File {csv_file_path} not found.")
        return []
    except Exception as e:
        print(f"Error reading CSV file: {e}")
        return []
    return list(cve_ids)

def main():
    parser = argparse.ArgumentParser(description="Check for public exploits for CVEs from a CSV file.")
    parser.add_argument("-i", "--input", type=str, default="cve_scan_results.csv", help="Input CSV file with CVE IDs")
    parser.add_argument("-o", "--output", type=str, default="exploit_results.json", help="Output JSON file for results")
    args = parser.parse_args()

    input_csv = args.input
    output_json = args.output

    print(f"Reading CVE IDs from {input_csv}...")
    cve_ids = read_cve_ids_from_csv(input_csv)

    if not cve_ids:
        print("No CVE IDs found in the CSV file.")
        return

    print(f"Found {len(cve_ids)} unique CVE IDs to check.")

    checker = CVEExploitChecker()
    print("Checking for exploits...")
    results = checker.process_cve_list(cve_ids)

    with open(output_json, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

    print(f"\nResults saved to {output_json}")
    print("\nSummary:")
    for cve_id, exploits in results.items():
        status = f"✓ {len(exploits)} exploits found" if exploits else "✗ No exploits found"
        print(f"{cve_id}: {status}")
        if exploits:
            for exploit in exploits:
                print(f"  - {exploit}")

if __name__ == "__main__":
    main()